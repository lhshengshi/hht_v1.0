; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\w5500_conf.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\w5500_conf.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\Libraries\ST_Library\CMSIS\Include -I..\Libraries\ST_Library\CMSIS\Device\ST\STM32F4xx\Include -I..\Libraries\ST_Library\STM32F4xx_StdPeriph_Driver\inc -I..\User\User\Inc -I..\User\User_BSP -I..\User\User_BSP\BSP_Inc -I..\User\User_BSP\BSP_Usart2 -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\obj\w5500_conf.crf ..\User\User_BSP\BSP_Internet\W5500\W5500_Conf.c]
                          THUMB

                          AREA ||i.Get_NetMsg||, CODE, READONLY, ALIGN=2

                  Get_NetMsg PROC
;;;35     */
;;;36     void Get_NetMsg(void)
000000  b085              SUB      sp,sp,#0x14
;;;37     {	
;;;38     	   /*定义默认IP信息*/
;;;39     	uint8_t  local_ip[4]   = {192,168,200,101};		/*定义W5500默认IP地址*/
000002  a211              ADR      r2,|L1.72|
000004  6812              LDR      r2,[r2,#0]
000006  9204              STR      r2,[sp,#0x10]
;;;40         uint8_t  subnet[4]     = {255,255,255,0};		/*定义W5500默认子网掩码*/
000008  a210              ADR      r2,|L1.76|
00000a  6812              LDR      r2,[r2,#0]
00000c  9203              STR      r2,[sp,#0xc]
;;;41         uint8_t  gateway[4]    = {192,168,200,1};		    /*定义W5500默认网关*/
00000e  a210              ADR      r2,|L1.80|
000010  6812              LDR      r2,[r2,#0]
000012  9202              STR      r2,[sp,#8]
;;;42         uint8_t  dns_server[4] = {114,114,115,115};		/*定义W5500默认DNS*/
000014  a20f              ADR      r2,|L1.84|
000016  6812              LDR      r2,[r2,#0]
000018  9201              STR      r2,[sp,#4]
;;;43         uint16_t local_port    = 5000;	                /*定义本地端口*/
00001a  f2413188          MOV      r1,#0x1388
;;;44         /*定义远端IP信息*/
;;;45         uint8_t  remote_ip[4] = {192,168,200,117};	     /*远端IP地址*/
00001e  a20e              ADR      r2,|L1.88|
000020  6812              LDR      r2,[r2,#0]
000022  9200              STR      r2,[sp,#0]
;;;46         uint16_t remote_port  = 8000;					/*远端端口号*/
000024  f44f50fa          MOV      r0,#0x1f40
;;;47     
;;;48         /*复制定义的配置信息到配置结构体*/
;;;49         memcpy(ConfigMsg.lip,local_ip,4);
000028  4a0c              LDR      r2,|L1.92|
00002a  9b04              LDR      r3,[sp,#0x10]
00002c  6093              STR      r3,[r2,#8]  ; ConfigMsg
;;;50         memcpy(ConfigMsg.sub,subnet,4);
00002e  9b03              LDR      r3,[sp,#0xc]
000030  60d3              STR      r3,[r2,#0xc]  ; ConfigMsg
;;;51         memcpy(ConfigMsg.gw,gateway,4);
000032  9b02              LDR      r3,[sp,#8]
000034  6113              STR      r3,[r2,#0x10]  ; ConfigMsg
;;;52         memcpy(ConfigMsg.dns,dns_server,4);
000036  9b01              LDR      r3,[sp,#4]
000038  6153              STR      r3,[r2,#0x14]  ; ConfigMsg
;;;53         memcpy(ConfigMsg.serip,remote_ip,4);
00003a  9b00              LDR      r3,[sp,#0]
00003c  6193              STR      r3,[r2,#0x18]  ; ConfigMsg
;;;54         ConfigMsg.port =local_port;
00003e  8391              STRH     r1,[r2,#0x1c]
;;;55         ConfigMsg.serport=remote_port;
000040  83d0              STRH     r0,[r2,#0x1e]
;;;56     
;;;57     }
000042  b005              ADD      sp,sp,#0x14
000044  4770              BX       lr
;;;58     /**
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
000048  c0a8c865          DCB      192,168,200,"e"
                  |L1.76|
00004c  ffffff00          DCB      255,255,255,0
                  |L1.80|
000050  c0a8c801          DCB      192,168,200,1
                  |L1.84|
000054  72727373          DCB      "rrss"
                  |L1.88|
000058  c0a8c875          DCB      192,168,200,"u"
                  |L1.92|
                          DCD      ConfigMsg

                          AREA ||i.IINCHIP_READ||, CODE, READONLY, ALIGN=2

                  IINCHIP_READ PROC
;;;119    */
;;;120    uint8_t IINCHIP_READ(uint32_t addrbsb)
000000  b570              PUSH     {r4-r6,lr}
;;;121    {
000002  4604              MOV      r4,r0
;;;122        uint8_t data = 0;
000004  2500              MOVS     r5,#0
;;;123        GPIO_ResetBits(WIZ_SCS_PORT, WIZ_SCS);
000006  f44f5180          MOV      r1,#0x1000
00000a  480d              LDR      r0,|L2.64|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;124        W5500_SPI_SendByte( (addrbsb & 0x00FF0000)>>16);
000010  f3c44007          UBFX     r0,r4,#16,#8
000014  f7fffffe          BL       W5500_SPI_SendByte
;;;125        W5500_SPI_SendByte( (addrbsb & 0x0000FF00)>> 8);
000018  f3c42007          UBFX     r0,r4,#8,#8
00001c  f7fffffe          BL       W5500_SPI_SendByte
;;;126        W5500_SPI_SendByte( (addrbsb & 0x000000F8))    ;
000020  f00400f8          AND      r0,r4,#0xf8
000024  f7fffffe          BL       W5500_SPI_SendByte
;;;127        data = W5500_SPI_SendByte(0x00);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       W5500_SPI_SendByte
00002e  4605              MOV      r5,r0
;;;128        GPIO_SetBits(WIZ_SCS_PORT, WIZ_SCS);
000030  f44f5180          MOV      r1,#0x1000
000034  4802              LDR      r0,|L2.64|
000036  f7fffffe          BL       GPIO_SetBits
;;;129        return data;
00003a  4628              MOV      r0,r5
;;;130    }
00003c  bd70              POP      {r4-r6,pc}
;;;131    
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      0x40020400

                          AREA ||i.IINCHIP_WRITE||, CODE, READONLY, ALIGN=2

                  IINCHIP_WRITE PROC
;;;103    */
;;;104    void IINCHIP_WRITE( uint32_t addrbsb,  uint8_t data)
000000  b570              PUSH     {r4-r6,lr}
;;;105    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;106        GPIO_ResetBits(WIZ_SCS_PORT, WIZ_SCS);
000006  f44f5180          MOV      r1,#0x1000
00000a  480d              LDR      r0,|L3.64|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;107        W5500_SPI_SendByte( (addrbsb & 0x00FF0000)>>16);
000010  f3c44007          UBFX     r0,r4,#16,#8
000014  f7fffffe          BL       W5500_SPI_SendByte
;;;108        W5500_SPI_SendByte( (addrbsb & 0x0000FF00)>> 8);
000018  f3c42007          UBFX     r0,r4,#8,#8
00001c  f7fffffe          BL       W5500_SPI_SendByte
;;;109        W5500_SPI_SendByte( (addrbsb & 0x000000F8) + 4);
000020  f00401f8          AND      r1,r4,#0xf8
000024  1d09              ADDS     r1,r1,#4
000026  b2c8              UXTB     r0,r1
000028  f7fffffe          BL       W5500_SPI_SendByte
;;;110        W5500_SPI_SendByte(data);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       W5500_SPI_SendByte
;;;111        GPIO_SetBits(WIZ_SCS_PORT, WIZ_SCS);
000032  f44f5180          MOV      r1,#0x1000
000036  4802              LDR      r0,|L3.64|
000038  f7fffffe          BL       GPIO_SetBits
;;;112    }
00003c  bd70              POP      {r4-r6,pc}
;;;113    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      0x40020400

                          AREA ||i.W5500_GetMac||, CODE, READONLY, ALIGN=2

                  W5500_GetMac PROC
;;;74     }
;;;75     void W5500_GetMac(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77         Get_ChipInfo();
000002  f7fffffe          BL       Get_ChipInfo
;;;78     	MAC[3] = (((DataStr[9]-'0')<<4)&0xF0)+(DataStr[10]-'0');
000006  4809              LDR      r0,|L4.44|
000008  7a40              LDRB     r0,[r0,#9]  ; DataStr
00000a  21f0              MOVS     r1,#0xf0
00000c  ea011100          AND      r1,r1,r0,LSL #4
000010  4806              LDR      r0,|L4.44|
000012  7a80              LDRB     r0,[r0,#0xa]  ; DataStr
000014  3830              SUBS     r0,r0,#0x30
000016  4408              ADD      r0,r0,r1
000018  4905              LDR      r1,|L4.48|
00001a  70c8              STRB     r0,[r1,#3]
;;;79     	MAC[4] = ChipUniqueID[1]&0xFF;
00001c  4805              LDR      r0,|L4.52|
00001e  7900              LDRB     r0,[r0,#4]  ; ChipUniqueID
000020  7108              STRB     r0,[r1,#4]
;;;80     	MAC[5] = ChipUniqueID[0]&0xFF;
000022  4804              LDR      r0,|L4.52|
000024  7800              LDRB     r0,[r0,#0]  ; ChipUniqueID
000026  7148              STRB     r0,[r1,#5]
;;;81     }
000028  bd10              POP      {r4,pc}
;;;82     /**
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      DataStr
                  |L4.48|
                          DCD      MAC
                  |L4.52|
                          DCD      ChipUniqueID

                          AREA ||i.W5500_Set_IP||, CODE, READONLY, ALIGN=2

                  W5500_Set_IP PROC
;;;62     */
;;;63     void W5500_Set_IP(void)
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65         /*将IP配置信息写入W5500相应寄存器*/
;;;66         setSUBR(ConfigMsg.sub);
000002  480b              LDR      r0,|L5.48|
000004  f7fffffe          BL       setSUBR
;;;67         setGAR(ConfigMsg.gw);
000008  4809              LDR      r0,|L5.48|
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       setGAR
;;;68         setSIPR(ConfigMsg.lip);
000010  4807              LDR      r0,|L5.48|
000012  1f00              SUBS     r0,r0,#4
000014  f7fffffe          BL       setSIPR
;;;69     
;;;70         getSIPR (ConfigMsg.lip);
000018  4805              LDR      r0,|L5.48|
00001a  1f00              SUBS     r0,r0,#4
00001c  f7fffffe          BL       getSIPR
;;;71         getSUBR(ConfigMsg.sub);
000020  4803              LDR      r0,|L5.48|
000022  f7fffffe          BL       getSUBR
;;;72         getGAR(ConfigMsg.gw);
000026  4802              LDR      r0,|L5.48|
000028  1d00              ADDS     r0,r0,#4
00002a  f7fffffe          BL       getGAR
;;;73     
;;;74     }
00002e  bd10              POP      {r4,pc}
;;;75     void W5500_GetMac(void)
                          ENDP

                  |L5.48|
                          DCD      ConfigMsg+0xc

                          AREA ||i.W5500_Set_MAC||, CODE, READONLY, ALIGN=2

                  W5500_Set_MAC PROC
;;;86     */
;;;87     void W5500_Set_MAC(void)
000000  b510              PUSH     {r4,lr}
;;;88     {
;;;89     	Get_ChipInfo();
000002  f7fffffe          BL       Get_ChipInfo
;;;90     	MAC[2] = (((DataStr[9]-'0')<<4)&0xF0)+(DataStr[10]-'0');
000006  480f              LDR      r0,|L6.68|
000008  7a40              LDRB     r0,[r0,#9]  ; DataStr
00000a  21f0              MOVS     r1,#0xf0
00000c  ea011100          AND      r1,r1,r0,LSL #4
000010  480c              LDR      r0,|L6.68|
000012  7a80              LDRB     r0,[r0,#0xa]  ; DataStr
000014  3830              SUBS     r0,r0,#0x30
000016  4408              ADD      r0,r0,r1
000018  490b              LDR      r1,|L6.72|
00001a  7088              STRB     r0,[r1,#2]
;;;91     	MAC[3] = (ChipUniqueID[0]>>16)&0xFF;
00001c  480b              LDR      r0,|L6.76|
00001e  6800              LDR      r0,[r0,#0]  ; ChipUniqueID
000020  0c00              LSRS     r0,r0,#16
000022  70c8              STRB     r0,[r1,#3]
;;;92     	MAC[4] = (ChipUniqueID[0])&0xFF;
000024  4809              LDR      r0,|L6.76|
000026  7800              LDRB     r0,[r0,#0]  ; ChipUniqueID
000028  7108              STRB     r0,[r1,#4]
;;;93     	MAC[5] = (ChipUniqueID[1])&0xFF;
00002a  4808              LDR      r0,|L6.76|
00002c  7900              LDRB     r0,[r0,#4]  ; ChipUniqueID
00002e  7148              STRB     r0,[r1,#5]
;;;94     	memcpy(ConfigMsg.mac, MAC, 6);
000030  4807              LDR      r0,|L6.80|
000032  680a              LDR      r2,[r1,#0]  ; MAC
000034  f8c02002          STR      r2,[r0,#2]  ; ConfigMsg
000038  8889              LDRH     r1,[r1,#4]  ; MAC
00003a  80c1              STRH     r1,[r0,#6]
;;;95         setSHAR(ConfigMsg.mac);	/**/
00003c  1c80              ADDS     r0,r0,#2
00003e  f7fffffe          BL       setSHAR
;;;96     }
000042  bd10              POP      {r4,pc}
;;;97     
                          ENDP

                  |L6.68|
                          DCD      DataStr
                  |L6.72|
                          DCD      MAC
                  |L6.76|
                          DCD      ChipUniqueID
                  |L6.80|
                          DCD      ConfigMsg

                          AREA ||i.wiz_read_buf||, CODE, READONLY, ALIGN=2

                  wiz_read_buf PROC
;;;161    */
;;;162    uint16_t wiz_read_buf(uint32_t addrbsb, uint8_t* buf,uint16_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;163    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;164        uint16_t idx = 0;
00000a  2600              MOVS     r6,#0
;;;165    //  if(len == 0)
;;;166    //  {
;;;167    ////    printf("Unexpected2 length 0\r\n");
;;;168    //  }
;;;169        GPIO_ResetBits(WIZ_SCS_PORT, WIZ_SCS);
00000c  f44f5180          MOV      r1,#0x1000
000010  4810              LDR      r0,|L7.84|
000012  f7fffffe          BL       GPIO_ResetBits
;;;170        W5500_SPI_SendByte( (addrbsb & 0x00FF0000)>>16);
000016  f3c44007          UBFX     r0,r4,#16,#8
00001a  f7fffffe          BL       W5500_SPI_SendByte
;;;171        W5500_SPI_SendByte( (addrbsb & 0x0000FF00)>> 8);
00001e  f3c42007          UBFX     r0,r4,#8,#8
000022  f7fffffe          BL       W5500_SPI_SendByte
;;;172        W5500_SPI_SendByte( (addrbsb & 0x000000F8));
000026  f00400f8          AND      r0,r4,#0xf8
00002a  f7fffffe          BL       W5500_SPI_SendByte
;;;173        for(idx = 0; idx < len; idx++)
00002e  bf00              NOP      
000030  e005              B        |L7.62|
                  |L7.50|
;;;174        {
;;;175            buf[idx] = W5500_SPI_SendByte(0x00);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       W5500_SPI_SendByte
000038  55b8              STRB     r0,[r7,r6]
00003a  1c70              ADDS     r0,r6,#1              ;173
00003c  b286              UXTH     r6,r0                 ;173
                  |L7.62|
00003e  42ae              CMP      r6,r5                 ;173
000040  dbf7              BLT      |L7.50|
;;;176        }
;;;177        GPIO_SetBits(WIZ_SCS_PORT, WIZ_SCS);
000042  f44f5180          MOV      r1,#0x1000
000046  4803              LDR      r0,|L7.84|
000048  f7fffffe          BL       GPIO_SetBits
;;;178        return len;
00004c  4628              MOV      r0,r5
;;;179    }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;180    
                          ENDP

000052  0000              DCW      0x0000
                  |L7.84|
                          DCD      0x40020400

                          AREA ||i.wiz_write_buf||, CODE, READONLY, ALIGN=2

                  wiz_write_buf PROC
;;;138    */
;;;139    uint16_t wiz_write_buf(uint32_t addrbsb,uint8_t* buf,uint16_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;140    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;141        uint16_t idx = 0;
00000a  2600              MOVS     r6,#0
;;;142    //   if(len == 0) ;//printf("Unexpected2 length 0\r\n");
;;;143        GPIO_ResetBits(WIZ_SCS_PORT, WIZ_SCS);
00000c  f44f5180          MOV      r1,#0x1000
000010  4810              LDR      r0,|L8.84|
000012  f7fffffe          BL       GPIO_ResetBits
;;;144        W5500_SPI_SendByte( (addrbsb & 0x00FF0000)>>16);
000016  f3c44007          UBFX     r0,r4,#16,#8
00001a  f7fffffe          BL       W5500_SPI_SendByte
;;;145        W5500_SPI_SendByte( (addrbsb & 0x0000FF00)>> 8);
00001e  f3c42007          UBFX     r0,r4,#8,#8
000022  f7fffffe          BL       W5500_SPI_SendByte
;;;146        W5500_SPI_SendByte( (addrbsb & 0x000000F8) + 4);
000026  f00401f8          AND      r1,r4,#0xf8
00002a  1d09              ADDS     r1,r1,#4
00002c  b2c8              UXTB     r0,r1
00002e  f7fffffe          BL       W5500_SPI_SendByte
;;;147        for(idx = 0; idx < len; idx++)
000032  bf00              NOP      
000034  e004              B        |L8.64|
                  |L8.54|
;;;148        {
;;;149            W5500_SPI_SendByte(buf[idx]);
000036  5db8              LDRB     r0,[r7,r6]
000038  f7fffffe          BL       W5500_SPI_SendByte
00003c  1c70              ADDS     r0,r6,#1              ;147
00003e  b286              UXTH     r6,r0                 ;147
                  |L8.64|
000040  42ae              CMP      r6,r5                 ;147
000042  dbf8              BLT      |L8.54|
;;;150        }
;;;151        GPIO_SetBits(WIZ_SCS_PORT, WIZ_SCS);
000044  f44f5180          MOV      r1,#0x1000
000048  4802              LDR      r0,|L8.84|
00004a  f7fffffe          BL       GPIO_SetBits
;;;152        return len;
00004e  4628              MOV      r0,r5
;;;153    }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;154    
                          ENDP

                  |L8.84|
                          DCD      0x40020400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ConfigMsg
                          %        40

                          AREA ||.data||, DATA, ALIGN=0

                  MAC
000000  4a4b14c0          DCB      0x4a,0x4b,0x14,0xc0
000004  0003              DCB      0x00,0x03

;*** Start embedded assembler ***

#line 1 "..\\User\\User_BSP\\BSP_Internet\\W5500\\W5500_Conf.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_W5500_Conf_c_MAC____REV16|
#line 129 "..\\Libraries\\ST_Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_W5500_Conf_c_MAC____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_W5500_Conf_c_MAC____REVSH|
#line 144
|__asm___12_W5500_Conf_c_MAC____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_W5500_Conf_c_MAC____RRX|
#line 300
|__asm___12_W5500_Conf_c_MAC____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
