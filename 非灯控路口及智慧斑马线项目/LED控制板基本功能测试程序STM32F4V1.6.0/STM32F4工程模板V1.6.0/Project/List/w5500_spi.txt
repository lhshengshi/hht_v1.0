; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\w5500_spi.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\w5500_spi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\Libraries\ST_Library\CMSIS\Include -I..\Libraries\ST_Library\CMSIS\Device\ST\STM32F4xx\Include -I..\Libraries\ST_Library\STM32F4xx_StdPeriph_Driver\inc -I..\User\User\Inc -I..\User\User_BSP -I..\User\User_BSP\BSP_Inc -I..\User\User_BSP\BSP_Usart2 -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\obj\w5500_spi.crf ..\User\User_BSP\BSP_Internet\W5500\W5500_SPI.c]
                          THUMB

                          AREA ||i.Internet_Init||, CODE, READONLY, ALIGN=2

                  Internet_Init PROC
;;;26     /* Private functions -----------------------------------*/
;;;27     void  Internet_Init(void)
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29         W5500_SPI_Configuration();	         /*初始化MCU相关引脚*/
000002  f7fffffe          BL       W5500_SPI_Configuration
;;;30     	Delay_ms(2000);
000006  f44f60fa          MOV      r0,#0x7d0
00000a  f7fffffe          BL       Delay_ms
;;;31         /*硬复位W5500*/
;;;32         GPIO_ResetBits(WIZ_RESET_PORT, WIZ_RESET);
00000e  f44f7180          MOV      r1,#0x100
000012  480c              LDR      r0,|L1.68|
000014  f7fffffe          BL       GPIO_ResetBits
;;;33         Delay_ms(50);
000018  2032              MOVS     r0,#0x32
00001a  f7fffffe          BL       Delay_ms
;;;34         GPIO_SetBits(WIZ_RESET_PORT, WIZ_RESET);
00001e  f44f7180          MOV      r1,#0x100
000022  4808              LDR      r0,|L1.68|
000024  f7fffffe          BL       GPIO_SetBits
;;;35         Delay_ms(2000);
000028  f44f60fa          MOV      r0,#0x7d0
00002c  f7fffffe          BL       Delay_ms
;;;36         W5500_Set_MAC();			         /*配置MAC地址*/
000030  f7fffffe          BL       W5500_Set_MAC
;;;37         W5500_Set_IP();                      /*配置IP地址*/
000034  f7fffffe          BL       W5500_Set_IP
;;;38         socket_buf_init(txsize, rxsize);     /*初始化8个Socket的发送接收缓存大小*/	
000038  4903              LDR      r1,|L1.72|
00003a  4804              LDR      r0,|L1.76|
00003c  f7fffffe          BL       socket_buf_init
;;;39     }
000040  bd10              POP      {r4,pc}
;;;40     /**
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x40020c00
                  |L1.72|
                          DCD      rxsize
                  |L1.76|
                          DCD      txsize

                          AREA ||i.W5500_SPI_Configuration||, CODE, READONLY, ALIGN=2

                  W5500_SPI_Configuration PROC
;;;43       */
;;;44     void W5500_SPI_Configuration(void)
000000  b500              PUSH     {lr}
;;;45     {
000002  b087              SUB      sp,sp,#0x1c
;;;46         SPI_InitTypeDef SPI_InitStruct;
;;;47         GPIO_InitTypeDef GPIO_InitStruct;
;;;48     
;;;49         RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
000004  2101              MOVS     r1,#1
000006  0388              LSLS     r0,r1,#14
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;50         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | WIZ_RESET_RCC | WIZ_SCS_RCC | WIZ_Pwr_RCC, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  200b              MOVS     r0,#0xb
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;51     
;;;52         GPIO_PinAFConfig(GPIOB, GPIO_PinSource13,  GPIO_AF_SPI2);
000014  2205              MOVS     r2,#5
000016  210d              MOVS     r1,#0xd
000018  4837              LDR      r0,|L2.248|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;53         GPIO_PinAFConfig(GPIOB, GPIO_PinSource14,  GPIO_AF_SPI2);
00001e  2205              MOVS     r2,#5
000020  210e              MOVS     r1,#0xe
000022  4835              LDR      r0,|L2.248|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;54         GPIO_PinAFConfig(GPIOB, GPIO_PinSource15,  GPIO_AF_SPI2);
000028  2205              MOVS     r2,#5
00002a  210f              MOVS     r1,#0xf
00002c  4832              LDR      r0,|L2.248|
00002e  f7fffffe          BL       GPIO_PinAFConfig
;;;55         //PA4->CS,PA5->SCK,PA6->MISO,PA7->MOSI
;;;56         GPIO_InitStruct.GPIO_Pin =  GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
000032  f44f4060          MOV      r0,#0xe000
000036  9000              STR      r0,[sp,#0]
;;;57         GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
000038  2003              MOVS     r0,#3
00003a  f88d0005          STRB     r0,[sp,#5]
;;;58         GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
00003e  2002              MOVS     r0,#2
000040  f88d0004          STRB     r0,[sp,#4]
;;;59         GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
000044  2000              MOVS     r0,#0
000046  f88d0006          STRB     r0,[sp,#6]
;;;60         GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_DOWN;
00004a  2002              MOVS     r0,#2
00004c  f88d0007          STRB     r0,[sp,#7]
;;;61         GPIO_Init(GPIOB, &GPIO_InitStruct);
000050  4669              MOV      r1,sp
000052  4829              LDR      r0,|L2.248|
000054  f7fffffe          BL       GPIO_Init
;;;62     
;;;63     	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
000058  2001              MOVS     r0,#1
00005a  f88d0004          STRB     r0,[sp,#4]
;;;64         GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
00005e  2000              MOVS     r0,#0
000060  f88d0006          STRB     r0,[sp,#6]
;;;65         GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
000064  2001              MOVS     r0,#1
000066  f88d0007          STRB     r0,[sp,#7]
;;;66     	
;;;67         //初始化片电源控制引脚
;;;68         GPIO_InitStruct.GPIO_Pin = WIZ_Pwr;
00006a  0200              LSLS     r0,r0,#8
00006c  9000              STR      r0,[sp,#0]
;;;69         GPIO_Init(WIZ_Pwr_PORT, &GPIO_InitStruct);
00006e  4669              MOV      r1,sp
000070  4822              LDR      r0,|L2.252|
000072  f7fffffe          BL       GPIO_Init
;;;70         GPIO_SetBits(WIZ_Pwr_PORT,WIZ_Pwr);
000076  f44f7180          MOV      r1,#0x100
00007a  4820              LDR      r0,|L2.252|
00007c  f7fffffe          BL       GPIO_SetBits
;;;71     	//初始化片选输出引脚
;;;72         GPIO_InitStruct.GPIO_Pin = WIZ_SCS;
000080  f44f5080          MOV      r0,#0x1000
000084  9000              STR      r0,[sp,#0]
;;;73     //    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
;;;74     //    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
;;;75     //    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
;;;76         GPIO_Init(WIZ_SCS_PORT, &GPIO_InitStruct);
000086  4669              MOV      r1,sp
000088  481b              LDR      r0,|L2.248|
00008a  f7fffffe          BL       GPIO_Init
;;;77         GPIO_SetBits(WIZ_SCS_PORT,WIZ_SCS);
00008e  f44f5180          MOV      r1,#0x1000
000092  4819              LDR      r0,|L2.248|
000094  f7fffffe          BL       GPIO_SetBits
;;;78         //初始化复位输出引脚
;;;79         GPIO_InitStruct.GPIO_Pin = WIZ_RESET;
000098  f44f7080          MOV      r0,#0x100
00009c  9000              STR      r0,[sp,#0]
;;;80     //    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
;;;81     //    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
;;;82     //    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
;;;83         GPIO_Init(WIZ_RESET_PORT, &GPIO_InitStruct);
00009e  4669              MOV      r1,sp
0000a0  4817              LDR      r0,|L2.256|
0000a2  f7fffffe          BL       GPIO_Init
;;;84         GPIO_SetBits(WIZ_RESET_PORT,WIZ_RESET);
0000a6  f44f7180          MOV      r1,#0x100
0000aa  4815              LDR      r0,|L2.256|
0000ac  f7fffffe          BL       GPIO_SetBits
;;;85     
;;;86         SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
0000b0  2000              MOVS     r0,#0
0000b2  f8ad0014          STRH     r0,[sp,#0x14]
;;;87         SPI_InitStruct.SPI_Direction= SPI_Direction_2Lines_FullDuplex;
0000b6  f8ad0008          STRH     r0,[sp,#8]
;;;88         SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
0000ba  f44f7082          MOV      r0,#0x104
0000be  f8ad000a          STRH     r0,[sp,#0xa]
;;;89         SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
0000c2  2000              MOVS     r0,#0
0000c4  f8ad000c          STRH     r0,[sp,#0xc]
;;;90         SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
0000c8  f8ad000e          STRH     r0,[sp,#0xe]
;;;91         SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
0000cc  f8ad0010          STRH     r0,[sp,#0x10]
;;;92         SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
0000d0  f44f7000          MOV      r0,#0x200
0000d4  f8ad0012          STRH     r0,[sp,#0x12]
;;;93         SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
0000d8  2000              MOVS     r0,#0
0000da  f8ad0016          STRH     r0,[sp,#0x16]
;;;94         SPI_InitStruct.SPI_CRCPolynomial = 7;
0000de  2007              MOVS     r0,#7
0000e0  f8ad0018          STRH     r0,[sp,#0x18]
;;;95         SPI_Init(SPI2,&SPI_InitStruct);
0000e4  a902              ADD      r1,sp,#8
0000e6  4807              LDR      r0,|L2.260|
0000e8  f7fffffe          BL       SPI_Init
;;;96     
;;;97         SPI_Cmd(SPI2, ENABLE);
0000ec  2101              MOVS     r1,#1
0000ee  4805              LDR      r0,|L2.260|
0000f0  f7fffffe          BL       SPI_Cmd
;;;98     }
0000f4  b007              ADD      sp,sp,#0x1c
0000f6  bd00              POP      {pc}
;;;99     
                          ENDP

                  |L2.248|
                          DCD      0x40020400
                  |L2.252|
                          DCD      0x40020000
                  |L2.256|
                          DCD      0x40020c00
                  |L2.260|
                          DCD      0x40003800

                          AREA ||i.W5500_SPI_SendByte||, CODE, READONLY, ALIGN=2

                  W5500_SPI_SendByte PROC
;;;104    */
;;;105    uint8_t W5500_SPI_SendByte(uint8_t byte)
000000  b510              PUSH     {r4,lr}
;;;106    {
000002  4604              MOV      r4,r0
;;;107    
;;;108    	/* Loop while DR register in not emplty */
;;;109        while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L3.6|
000006  2102              MOVS     r1,#2
000008  480a              LDR      r0,|L3.52|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L3.6|
;;;110        /* Send byte through the SPI1 peripheral */
;;;111        SPI_I2S_SendData(SPI2, byte);
000012  4621              MOV      r1,r4
000014  4807              LDR      r0,|L3.52|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;112    
;;;113        /* Wait to receive a byte */
;;;114        while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L3.28|
00001c  2101              MOVS     r1,#1
00001e  4805              LDR      r0,|L3.52|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L3.28|
;;;115        /* Return the byte read from the SPI bus */
;;;116        return SPI_I2S_ReceiveData(SPI2);
000028  4802              LDR      r0,|L3.52|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
00002e  b2c0              UXTB     r0,r0
;;;117    }
000030  bd10              POP      {r4,pc}
;;;118    /********** (C) COPYRIGHT DIY嵌入式开发工作室 （END OF FILE ）************************/
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      0x40003800

;*** Start embedded assembler ***

#line 1 "..\\User\\User_BSP\\BSP_Internet\\W5500\\W5500_SPI.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_W5500_SPI_c_22723591____REV16|
#line 129 "..\\Libraries\\ST_Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_W5500_SPI_c_22723591____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_W5500_SPI_c_22723591____REVSH|
#line 144
|__asm___11_W5500_SPI_c_22723591____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_W5500_SPI_c_22723591____RRX|
#line 300
|__asm___11_W5500_SPI_c_22723591____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
